"""
给定一个未排序的整数数组 nums ，找出数字连续的最长序列（不要求序列元素在原数组中连续）的长度。

请你设计并实现时间复杂度为 O(n) 的算法解决此问题。



示例 1：

输入：nums = [100,4,200,1,3,2]
输出：4
解释：最长数字连续序列是 [1, 2, 3, 4]。它的长度为 4。
示例 2：

输入：nums = [0,3,7,2,5,8,4,6,0,1]
输出：9


提示：

0 <= nums.length <= 105
-109 <= nums[i] <= 109
"""
from typing import List


class Solution:
    def longestConsecutive(self, nums: List[int]) -> int:
        # 1. 哈希表
        # 2. 并查集
        # 3. 排序
        # 4. 暴力
        # 5. 动态规划
        # 6. 分治
        # 7. 二分查找
        # 8. 拓扑排序
        # 9. 几何
        # 10. 位运算
        # 11. 布隆过滤器
        # 12. 字典树和并查集
        # 13. 计数排序
        # 14. 贪心算法
        # 15. 随机化
        # 16. 滑动窗口
        # 17. 设计
        # 18. 数学
        # 19. 二叉搜索树
        # 20. 分治算法
        # 21. 图
        # 22. 字符串
        # 23. 数组
        # 24. 哈希表
        # 25. 链表
        # 26. 栈
        # 27. 堆
        # 28. 回溯算法
        # 29. 深度优先搜索
        # 30. 广度优先搜索
        # 31. 二分查找
        # 32. 动态规划
        # 33. 数学
        # 34. 贪心算法
        # 35. 排序
        # 36. 位运算
        # 37. 字符串
        # 38. 树
        # 39. 数组
        # 40. 哈希表
        # 41. 双指针
        # 42. 设计
        # 43. 递归
        # 44. 链表
        # 45. 栈
        # 46. 堆
        # 47. 回溯算
        # 48. 深度优先搜索
        # 49. 广度优先搜索
        nums = set(nums)
        ans = 0
        for num in nums:
            if num - 1 not in nums:
                cur = num
                cur_len = 1
                while cur + 1 in nums:
                    cur += 1
                    cur_len += 1
                ans = max(ans, cur_len)
        return ans
